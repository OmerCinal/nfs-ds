# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import nfs_pb2 as nfs__pb2


class NFSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_dir = channel.unary_unary(
                '/nfs.NFS/list_dir',
                request_serializer=nfs__pb2.Path.SerializeToString,
                response_deserializer=nfs__pb2.String.FromString,
                )
        self.create_dir = channel.unary_unary(
                '/nfs.NFS/create_dir',
                request_serializer=nfs__pb2.Path.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.delete_dir = channel.unary_unary(
                '/nfs.NFS/delete_dir',
                request_serializer=nfs__pb2.Path.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.rename_dir = channel.unary_unary(
                '/nfs.NFS/rename_dir',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.copy_dir = channel.unary_unary(
                '/nfs.NFS/copy_dir',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.move_dir = channel.unary_unary(
                '/nfs.NFS/move_dir',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.get_file = channel.unary_unary(
                '/nfs.NFS/get_file',
                request_serializer=nfs__pb2.Path.SerializeToString,
                response_deserializer=nfs__pb2.FileDownload.FromString,
                )
        self.upload_file = channel.unary_unary(
                '/nfs.NFS/upload_file',
                request_serializer=nfs__pb2.FileUpload.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.delete_file = channel.unary_unary(
                '/nfs.NFS/delete_file',
                request_serializer=nfs__pb2.Path.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.rename_file = channel.unary_unary(
                '/nfs.NFS/rename_file',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.copy_file = channel.unary_unary(
                '/nfs.NFS/copy_file',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )
        self.move_file = channel.unary_unary(
                '/nfs.NFS/move_file',
                request_serializer=nfs__pb2.DoublePath.SerializeToString,
                response_deserializer=nfs__pb2.Status.FromString,
                )


class NFSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rename_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copy_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def move_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rename_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copy_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def move_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NFSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.list_dir,
                    request_deserializer=nfs__pb2.Path.FromString,
                    response_serializer=nfs__pb2.String.SerializeToString,
            ),
            'create_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.create_dir,
                    request_deserializer=nfs__pb2.Path.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'delete_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_dir,
                    request_deserializer=nfs__pb2.Path.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'rename_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.rename_dir,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'copy_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.copy_dir,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'move_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.move_dir,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'get_file': grpc.unary_unary_rpc_method_handler(
                    servicer.get_file,
                    request_deserializer=nfs__pb2.Path.FromString,
                    response_serializer=nfs__pb2.FileDownload.SerializeToString,
            ),
            'upload_file': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_file,
                    request_deserializer=nfs__pb2.FileUpload.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'delete_file': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_file,
                    request_deserializer=nfs__pb2.Path.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'rename_file': grpc.unary_unary_rpc_method_handler(
                    servicer.rename_file,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'copy_file': grpc.unary_unary_rpc_method_handler(
                    servicer.copy_file,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
            'move_file': grpc.unary_unary_rpc_method_handler(
                    servicer.move_file,
                    request_deserializer=nfs__pb2.DoublePath.FromString,
                    response_serializer=nfs__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nfs.NFS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NFS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/list_dir',
            nfs__pb2.Path.SerializeToString,
            nfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/create_dir',
            nfs__pb2.Path.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/delete_dir',
            nfs__pb2.Path.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rename_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/rename_dir',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def copy_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/copy_dir',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def move_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/move_dir',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/get_file',
            nfs__pb2.Path.SerializeToString,
            nfs__pb2.FileDownload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/upload_file',
            nfs__pb2.FileUpload.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/delete_file',
            nfs__pb2.Path.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rename_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/rename_file',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def copy_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/copy_file',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def move_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/move_file',
            nfs__pb2.DoublePath.SerializeToString,
            nfs__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
